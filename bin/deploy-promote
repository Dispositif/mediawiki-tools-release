#!/bin/bash

# Copyright Â© 2016 Mukunda Modell, Tyler Cipriani
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
# http://www.gnu.org/copyleft/gpl.html
#

# deploy-promote promotes a specified group of wikis to the specified
# wmf deployment branch (or the latest branch if none is specified)
#
# Example usage:
#
# bin/deploy-promote group0 1.26wmf10
#
# The above command promotes all group0 wikis (testwiki and mediawiki.org)
# to version 1.26wmf10.

notify() {
    printf "[INFO] %s\n" "$@"
}

die() {
    local exit_code="$1"
    shift
    printf "[EXITING] %s\n" "$@"
    exit "$exit_code"
}

abort() {
    die 2 "Aborted by user"
}

ask() {
    # http://djm.me/ask
    while true; do

        if [ "${2:-}" = "Y" ]; then
            prompt="Y/n"
            default=Y
        elif [ "${2:-}" = "N" ]; then
            prompt="y/N"
            default=N
        else
            prompt="y/n"
            default=
        fi

        # Ask the question - use /dev/tty in case stdin is redirected from somewhere else
        read -p "$1 [$prompt] " REPLY </dev/tty

        # Default?
        if [ -z "$REPLY" ]; then
            REPLY=$default
        fi

        # Check if the reply is valid
        case "$REPLY" in
            Y*|y*) return 0 ;;
            N*|n*) return 1 ;;
        esac

    done
}

print_results() {
    local res="$1"
    printf "==================================================\n"
    printf "Checking version on %s\n" "$URLTOCHECK"
    printf "Expect: %s\n" "$VERSION"
    printf "Result: %s\n" "$res\n"
    printf "==================================================\n"
}

check_versions() {
    CHECKDOMAIN="en.wikipedia.org"

    if [[ "$GRP" == "group1" ]]; then
        CHECKDOMAIN="en.wikinews.org"
    elif [[ "$GRP" == "group0" ]]; then
        CHECKDOMAIN="www.mediawiki.org"
    fi

    URLTOCHECK="https://$CHECKDOMAIN/wiki/Special:Version"

    if curl -sS $URLTOCHECK | grep -o "$VERSION" &> /dev/null; then
        print_results "SUCCESS"
    else
        print_results "FAIL"
        exit 3
    fi
}

assert_repository_is_clean() {
    if [ "$(git status --porcelain)" != "" ]; then
        echo 'Git repo is not clean!'
        echo
	git status
        echo
	if ask "Continue anyway?" N; then
            echo 'continuing...'
        else
            abort
        fi
    fi
}

update_versions() {
    set -e

    cd /srv/mediawiki-staging/

    /srv/mediawiki-staging/multiversion/updateWikiversions "$GRP" "php-${VERSION}"
    git add wikiversions.json
    #git add w/static/current
    #git add docroot/bits/static
    git add php
    MSG="${GRP} wikis to ${VERSION}"
    git commit -m "$MSG"
    git push origin "HEAD:refs/for/master/${VERSION}"
    git reset --hard HEAD^
    read -p "Now merge the patch and press enter to continue with git pull && sync-wikiversions"

    notify "Running git pull"

    git pull

    HEADMSG=$(git log --pretty=oneline -1 | cut -f 2- -d " ")

    if [[ "$HEADMSG" != "$MSG" ]]; then
        die 1 "Pulled Revision ${MSG} did not match ${HEADMSG}"
    fi

    notify "Running sync-wikiversions"

    sync-wikiversions "$MSG"

    set +e
    check_versions
}

main() {
    OLDVERSION=$(/srv/mediawiki-staging/multiversion/activeMWVersions | tr " " "\n" | sort --version-sort | head -1)
    NEWVERSION=$(/srv/mediawiki-staging/multiversion/activeMWVersions | tr " " "\n" | sort --version-sort | head -2 | tail -1)
    GRP="${1:-group1}"
    VERSION="${2:-$NEWVERSION}"

    if [ ! -f "/srv/mediawiki-staging/dblists/$GRP.dblist" ]; then
        die 1 "$DBLIST does not exist"
    fi

    assert_repository_is_clean

    if ask "Promote $GRP from ${OLDVERSION} to ${VERSION}?" N; then
        update_versions
    else
        abort
    fi
}

main "$@"
